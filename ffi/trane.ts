/*
 Generated by typeshare 1.6.0
*/

export interface Instrument {
	name: string;
	id: string;
}

export interface ImprovisationConfig {
	improvisation_dependencies?: string[];
	rhythm_only?: boolean;
	passage_directory: string;
	file_extensions: string[];
}

export interface ImprovisationPreferences {
	instruments?: Instrument[];
	rhythm_instruments?: Instrument[];
}

export interface KnowledgeBaseConfig {
}

export interface MusicPassage {
	start: string;
	end: string;
	sub_passages: Record<number, MusicPassage>;
}

export type MusicAsset = 
	| { type: "SoundSlice", content: string }
	| { type: "LocalFile", content: string };

export interface MusicPieceConfig {
	music_asset: MusicAsset;
	passages: MusicPassage;
}

export type TranscriptionAsset = 
	| { type: "Track", content: {
	short_id: string;
	track_name: string;
	artist_name?: string;
	album_name?: string;
	duration?: string;
	external_link?: string;
}};

export interface TranscriptionPassages {
	asset: TranscriptionAsset;
	intervals: Record<number, string[]>;
}

export interface TranscriptionPreferences {
	instruments?: Instrument[];
}

export interface TranscriptionConfig {
	transcription_dependencies?: string[];
	passage_directory?: string;
	inlined_passages?: TranscriptionPassages[];
	skip_advanced_lessons?: boolean;
}

export type KeyValueFilter = 
	| { type: "BasicFilter", content: {
	key: string;
	value: string;
	filter_type: FilterType;
}}
	| { type: "CombinedFilter", content: {
	op: FilterOp;
	filters: KeyValueFilter[];
}};

export enum FilterOp {
	All = "All",
	Any = "Any",
}

export interface MetadataFilter {
	course_filter?: KeyValueFilter;
	lesson_filter?: KeyValueFilter;
	op: FilterOp;
}

export type UnitFilter = 
	| { type: "CourseFilter", content: {
	course_ids: string[];
}}
	| { type: "LessonFilter", content: {
	lesson_ids: string[];
}}
	| { type: "MetadataFilter", content: {
	filter: MetadataFilter;
}}
	| { type: "ReviewListFilter", content?: undefined }
	| { type: "Dependents", content: {
	unit_ids: string[];
}}
	| { type: "Dependencies", content: {
	unit_ids: string[];
	depth: number;
}};

export interface SavedFilter {
	id: string;
	description: string;
	filter: UnitFilter;
}

export type SessionPart = 
	| { type: "UnitFilter", content: {
	filter: UnitFilter;
	duration: number;
}}
	| { type: "SavedFilter", content: {
	filter_id: string;
	duration: number;
}}
	| { type: "NoFilter", content: {
	duration: number;
}};

export interface StudySession {
	id: string;
	description?: string;
	parts?: SessionPart[];
}

export type BasicAsset = 
	| { type: "MarkdownAsset", content: {
	path: string;
}}
	| { type: "InlinedAsset", content: {
	content: string;
}}
	| { type: "InlinedUniqueAsset", content: {
	content: string;
}};

export type CourseGenerator = 
	| { type: "Improvisation", content: ImprovisationConfig }
	| { type: "KnowledgeBase", content: KnowledgeBaseConfig }
	| { type: "MusicPiece", content: MusicPieceConfig }
	| { type: "Transcription", content: TranscriptionConfig };

export interface CourseManifest {
	id: string;
	name?: string;
	dependencies?: string[];
	description?: string;
	authors?: string[];
	metadata?: Record<string, string[]>;
	course_material?: BasicAsset;
	course_instructions?: BasicAsset;
	generator_config?: CourseGenerator;
}

export interface LessonManifest {
	id: string;
	dependencies?: string[];
	course_id: string;
	name?: string;
	description?: string;
	metadata?: Record<string, string[]>;
	lesson_material?: BasicAsset;
	lesson_instructions?: BasicAsset;
}

export enum ExerciseType {
	Declarative = "Declarative",
	Procedural = "Procedural",
}

export type ExerciseAsset = 
	| { type: "SoundSliceAsset", content: {
	link: string;
	description?: string;
	backup?: string;
}}
	| { type: "FlashcardAsset", content: {
	front_path: string;
	back_path?: string;
}}
	| { type: "BasicAsset", content: BasicAsset };

export interface ExerciseManifest {
	id: string;
	lesson_id: string;
	course_id: string;
	name?: string;
	description?: string;
	exercise_type?: ExerciseType;
	exercise_asset: ExerciseAsset;
}

export interface SchedulerPreferences {
	batch_size?: number;
}

export interface RepositoryMetadata {
	id: string;
	url: string;
}

export interface UserPreferences {
	improvisation?: ImprovisationPreferences;
	transcription?: TranscriptionPreferences;
	scheduler?: SchedulerPreferences;
	ignored_paths?: string[];
}

export enum FilterType {
	Include = "Include",
	Exclude = "Exclude",
}

export enum UnitType {
	Exercise = "Exercise",
	Lesson = "Lesson",
	Course = "Course",
}

